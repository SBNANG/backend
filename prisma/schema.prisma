datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model room {
  room_id      Int       @id @default(autoincrement())
  room_number  String    @db.VarChar(5)
  room_price   Float     @db.Float
  room_type_id Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  room_type    room_type @relation(fields: [room_type_id], references: [room_type_id])
  booking      booking[]
}

model room_type {
  room_type_id     Int      @id @default(autoincrement())
  room_type_name   String   @db.VarChar(20)
  room_type_bed    String   @db.VarChar(15)
  room_type_detail String   @db.VarChar(50)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  room             room[]
}

model customer {
  customer_id       Int       @id @default(autoincrement())
  customer_prefix   String    @db.VarChar(10)
  customer_name     String    @db.VarChar(10)
  customer_surname  String    @db.VarChar(10)
  customer_email    String    @db.VarChar(30)
  customer_password String    @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  payment           payment[]
  Booking           booking[]

}

model authorities {
  authorities_id       Int       @id @default(autoincrement())
  authorities_prefix   String    @db.VarChar(10)
  authorities_name     String    @db.VarChar(10)
  authorities_surname  String    @db.VarChar(10)
  authorities_email    String    @db.VarChar(30)
  authorities_password String    @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  payment              payment[]
  Booking              booking[]
}

model payment {
  payment_id     Int         @id @default(autoincrement())
  payment_image  String      @db.Text
  customer_id    Int
  authorities_id Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  booking        booking[]
  customer       customer    @relation(fields: [customer_id], references: [customer_id])
  authorities    authorities @relation(fields: [authorities_id], references: [authorities_id])
}

model booking_status {
  booking_status_id   Int       @id @default(autoincrement())
  booking_status_name String    @db.VarChar(20)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  booking             booking[]
}

model booking {
  booking_id        Int            @id @default(autoincrement())
  booking_start     DateTime       @db.DateTime
  booking_end       DateTime       @db.DateTime
  booking_status_id Int
  room_id           Int
  customer_id       Int
  authorities_id    Int
  payment_id        Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  booking_status    booking_status @relation(fields: [booking_status_id], references: [booking_status_id])
  room              room           @relation(fields: [room_id], references: [room_id])
  customer          customer       @relation(fields: [customer_id], references: [customer_id])
  authorities       authorities    @relation(fields: [authorities_id], references: [authorities_id])
  payment           payment        @relation(fields: [payment_id], references: [payment_id])
  Check_in          check_in[]
}

model check_in {
  check_in_id Int         @id @default(autoincrement())
  booking_id  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  booking     booking     @relation(fields: [booking_id], references: [booking_id])
  Check_out   check_out[]
}

model check_out {
  check_out_id Int      @id @default(autoincrement())
  check_in_id  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  check_in     check_in @relation(fields: [check_in_id], references: [check_in_id])
}
